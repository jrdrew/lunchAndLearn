buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jondrew' at '4/13/16 3:56 PM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
    id 'net.saliman.cobertura' version '2.3.1'
}
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'war'


// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.postgresql:postgresql:9.4-1201-jdbc41"

    compile 'org.springframework:spring-context:4.2.3.RELEASE'
    compile 'org.springframework:spring-jdbc:4.2.2.RELEASE'
    compile 'org.springframework:spring-tx:4.2.2.RELEASE'
    compile 'org.springframework:spring-web:4.2.2.RELEASE'
    compile 'org.springframework:spring-webmvc:4.2.2.RELEASE'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'


    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.8.5'
    testCompile 'com.openpojo:openpojo:0.8.1'

    testCompile 'org.springframework:spring-test:4.2.2.RELEASE'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

war {
    archiveName = 'lunchandlearn.war'
}

// Don't use Jetty8, even it's a servlet 3.0+ container,
// but not support non-jar WebApplicationInitializer scanning.
// It will cause "No Spring WebApplicationInitializer types detected on classpath"
gretty {
    port = 8080
    contextPath = ''
    servletContainer = 'jetty9' //tomcat7 or tomcat8
}

